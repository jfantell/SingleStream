"use strict";

var tester = require("tester"),
    Lien = require(".."),
    request = require("tinyreq"),
    fs = require("fs");

var URL = "http://localhost:9000/";

tester.describe("lien", function (t) {

    var server = null;

    // Init lien server
    t.should("start the server", function (cb) {

        // Start the server
        server = new Lien({
            host: "localhost",
            port: 9000,
            public: __dirname + "/public",
            views: {
                path: __dirname + "/views",
                name: "ajs"
            }
        });

        // Listen for load
        server.on("load", cb);

        // Add handler page
        server.addPage("/", function (lien) {
            lien.end("Hello World");
        });

        // Add a dynamic route
        server.addPage("/post/:id", function (lien) {
            if (lien.fromBeforeHook) {
                var res = "1";
                if (lien.anotherFromBeforeHook) {
                    res += "1";
                }
                return lien.end(res);
            }
            lien.end("Post id: " + lien.params.id);
        });

        // Add a static file
        server.addPage("/test", "/index.html");
        server.errorPages();

        server.on("serverError", function (err) {
            console.log(err.stack);
        });
    });

    t.it("add a static url to test lien fields", function (cb) {
        var url = URL + "templates/bar?foo=bar";
        server.addPage("/templates/bar", function (lien) {
            t.expect(lien.href).toBe(url.replace(":9000", ""));
            t.expect(lien.path).toBe("/templates/bar");
            t.expect(lien.full_path).toBe("/templates/bar?foo=bar");
            t.expect(lien.host).toBe("localhost");
            t.expect(lien.protocol).toBe("http");
            t.expect(lien.domain).toBe("http://localhost");
            t.expect(lien.query.foo).toBe("bar");
            lien.end();
        });
        request(url, cb);
    });

    t.it("add a static url which renders templates", function () {
        server.addPage("/templates/foo", function (lien) {
            lien.render("main", { page: "Home" });
        });
    });

    t.should("static route", function (cb) {
        request(URL, function (err, body, res) {
            t.expect(body).toBe("Hello World");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.should("serve file", function (cb) {
        request(URL + "test", function (err, body, res) {
            t.expect(body).toBe(fs.readFileSync(__dirname + "/public/index.html", "utf8"));
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.should("check before adding the hook", function (cb) {
        request(URL + "post/12", function (err, body, res) {
            t.expect(body).toBe("Post id: 12");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.should("add before hook", function () {
        server.hook("before", "/post/:id", "get", function (lien) {
            lien.fromBeforeHook = true;
        });
    });

    t.should("check after the before hook", function (cb) {
        request(URL + "post/12", function (err, body, res) {
            t.expect(body).toBe("1");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.should("add before hook", function () {
        server.hook("before", "*", "get", function (lien) {
            lien.anotherFromBeforeHook = true;
        });
    });

    t.should("check after the before hook", function (cb) {
        request(URL + "post/12", function (err, body, res) {
            t.expect(body).toBe("11");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.should("add after hook", function () {
        server.hook("after", "/post/:id", "get", function (res, next) {
            res.content = "hi";
            next();
        });
    });

    t.should("check after hook", function (cb) {
        request(URL + "post/12", function (err, body, res) {
            t.expect(body).toBe("hi");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.should("add different pages", function () {
        var articleIds = {
            a: "Hello World!",
            b: "Hello Mars!"
        };
        server.addPage("/foo/article/:id", function (lien) {
            var content = articleIds[lien.params.id];
            if (content) {
                lien.end(content);
            } else {
                lien.next();
            }
        });
    });

    t.it("possible-404 page (foo/article/a)", function (cb) {
        request(URL + "foo/article/a", function (err, body, res) {
            t.expect(body).toBe("Hello World!");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.it("possible-404 page (foo/article/b)", function (cb) {
        request(URL + "foo/article/b", function (err, body, res) {
            t.expect(body).toBe("Hello Mars!");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.it("possible-404 page (foo/article/c)", function (cb) {
        request(URL + "foo/article/c", function (err, body, res) {
            t.expect(err).toBe(null);
            t.expect(body.match("404")).toNotBe(null);
            t.expect(res.statusCode).toBe(404);
            cb();
        });
    });

    t.should("add different pages, overriding the public dir", function () {
        server.addPage("/foo/bar", function (lien) {
            lien.end("foo bar");
        });
        server.addPage("/foo/:dyn", function (lien) {
            lien.end("foo:" + lien.params.dyn);
        });
    });

    t.it("check foo index before adding the custom route", function (cb) {
        request(URL + "foo", function (err, body, res) {
            t.expect(body).toBe("html foo\n");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.it("load static HTML file", function (cb) {
        request(URL + "test.html", function (err, body, res) {
            t.expect(body).toBe("test\n");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.it("check foo/bar ", function (cb) {
        request(URL + "foo/bar", function (err, body, res) {
            t.expect(body).toBe("foo bar");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.should("override public dir", function () {
        server.addPage("/foo", function (lien) {
            lien.end("foo index");
        });
    });

    t.it("check foo index after adding the custom route", function (cb) {
        request(URL + "foo", function (err, body, res) {
            t.expect(body).toBe("foo index");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.it("check foo/:dyn ", function (cb) {
        request(URL + "foo/baz", function (err, body, res) {
            t.expect(body).toBe("foo:baz");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.should("add dynamic page", function () {
        server.addPage("/:fooo", function (lien) {
            lien.end("dynamic:" + lien.params.fooo);
        });
    });

    t.it("check /:dyn ", function (cb) {
        request(URL + "baz", function (err, body, res) {
            t.expect(body).toBe("dynamic:baz");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.it("load static HTML file", function (cb) {
        server.hook("before", ":foo.*", function (lien, cb) {
            if (!~lien.path.indexOf(".")) {
                return cb();
            }
            lien.next();
        });
        request(URL + "test.html", function (err, body, res) {
            t.expect(body).toBe("test\n");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.it("add a static url which renders templates", function (cb) {
        request(URL + "templates/foo", function (err, body, res) {
            t.expect(body).toBe("<h1>Page: Home</h1>\n");
            t.expect(res.statusCode).toBe(200);
            cb();
        });
    });

    t.should("close the server", function (cb) {
        cb();
        process.exit();
    });
});