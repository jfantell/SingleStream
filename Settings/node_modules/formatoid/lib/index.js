"use strict";

var months = require("months"),
    days = require("days"),
    fillo = require("fillo"),
    ParseIt = require("parse-it").Parser;

var parser = new ParseIt({
  // Years
  /// 2015
  "YYYY": function YYYY(i) {
    return i.getFullYear();
  }

  // 15
  , "YY": function YY(i) {
    return i.getFullYear() % 100;
  }

  // Months
  // January
  , "MMMM": function MMMM(i) {
    return months[i.getMonth()];
  }

  // Jan
  , "MMM": function MMM(i) {
    return months.abbr[i.getMonth()];
  }

  // 01
  , "MM": function MM(i) {
    return fillo(i.getMonth() + 1);
  }

  // 1
  , "M": function M(i) {
    return i.getMonth() + 1;
  }

  // Days
  // Sunday
  , "dddd": function dddd(i) {
    return days[i.getDay()];
  }
  // Sun
  , "ddd": function ddd(i) {
    return days.abbr[i.getDay()];
  }
  // Su
  , "dd": function dd(i) {
    return days.short[i.getDay()];
  }
  // 0
  , "d": function d(i) {
    return i.getDay();
  }

  // Dates
  // 06  Day in month
  , "DD": function DD(i) {
    return fillo(i.getDate());
  }
  // 6   Day in month
  , "D": function D(i) {
    return i.getDate();
  }

  // AM/PM
  // AM/PM
  , "A": function A(i) {
    return i.getHours() >= 12 ? "PM" : "AM";
  }
  // am/pm
  , "a": function a(i) {
    return i.getHours() >= 12 ? "pm" : "am";
  }

  // Hours
  // 08 Hour
  , "hh": function hh(i) {
    return fillo(i.getHours() % 12 || 12);
  }
  // 8 Hour
  , "h": function h(i) {
    return i.getHours() % 12 || 12;
  }
  // (alias)
  , "HH": function HH(i) {
    return fillo(i.getHours());
  }
  // (alias)
  , "H": function H(i) {
    return i.getHours();
  }

  // Minutes
  // 09 Minute
  , "mm": function mm(i) {
    return fillo(i.getMinutes());
  }
  // 9  Minute
  , "m": function m(i) {
    return i.getMinutes();
  }

  // Seconds
  // 09 Seconds
  , "ss": function ss(i) {
    return fillo(i.getSeconds());
  }

  // 9  Seconds
  , "s": function s(i) {
    return i.getSeconds();
  }
});

/**
 * formatoid
 * Formats the date into a given format.
 *
 * Usable format fields:
 *
 *  - **Years**
 *      - `YYYY` (e.g. `"2015"`)
 *      - `YY` (e.g. `"15"`)
 *  - **Months**
 *      - `MMMM` (e.g. `"January"`)
 *      - `MMM` (e.g. `"Jan"`)
 *      - `MM` (e.g. `"01"`)
 *      - `M` (e.g. `"1"`)
 *  - **Days**
 *      - `dddd` (e.g. `"Sunday"`)
 *      - `ddd` (e.g. `"Sun"`)
 *      - `dd` (e.g. `"Su"`)
 *      - `d` (e.g. `"Su"`)
 *  - **Dates**
 *      - `DD` (e.g. `"07"`)
 *      - `D` (e.g. `"7"`)
 *  - **AM/PM**
 *      - `A` (e.g. `"AM"`)
 *      - `a` (e.g. `"pm"`)
 *  - **Hours**
 *      - `hh` (e.g. `"07"`)–12 hour format
 *      - `h` (e.g. `"7"`)
 *      - `HH` (e.g. `"07"`)–24 hour format
 *      - `H` (e.g. `"7"`)
 *  - **Minutes**
 *      - `mm` (e.g. `"07"`)
 *      - `m` (e.g. `"7"`)
 *  - **Seconds**
 *      - `ss` (e.g. `"07"`)
 *      - `s` (e.g. `"7"`)
 *
 * @name formatoid
 * @function
 * @param {Date} i The date object.
 * @param {String} f The date format.
 * @return {String} The formatted date (as string).
 */
module.exports = function formatoid(i, f) {
  return parser.run(f, [i]);
};